# -*- coding: utf-8 -*-
"""Diabetes prediction model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gBWQJ2cU5s0VT0jpppMpvTXd208fAeJM
"""

#Importing the dependencies

import numpy as np 
import pandas as pd 
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""data collection and analysis 
PIMA diabetes dataset
"""

#loading the diabetes dataset to a pandas DataFrame
path = '/content/drive/MyDrive/mlproject2/diabetes.csv' 
diabetes_dataset = pd.read_csv(path)

pd.read_csv?

# printing the first 5 rows of the dataset
diabetes_dataset.head()

# numner of rows and columns in the dataset
diabetes_dataset.shape

# getting the statistical measure of the data
diabetes_dataset.describe()

diabetes_dataset['Outcome'].value_counts()

# 0 --> Non- Diabetic
# 1 --> Diabetic

diabetes_dataset.groupby('Outcome').mean()

#separating the data and labels 
X = diabetes_dataset.drop(columns = 'Outcome' , axis=1)
Y = diabetes_dataset['Outcome']

print(X)

print(Y)

# Data Standardization

scaler = StandardScaler()

scaler.fit(X)

standardized_data = scaler.transform(X)

print(standardized_data)

X = standardized_data
Y = diabetes_dataset['Outcome']

print(X)
print(Y)

#trian test and split

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.2, stratify=Y, random_state=2)

print(X.shape , X_train.shape , X_test.shape)

# trainin the model

classifier = svm.SVC(kernel = 'linear')

#training the support vector machine classifier
classifier.fit(X_train, Y_train)

#model evaluation

#accuracy score

# accuracy score on the training data
X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction , Y_train)

print('Accuracy score of the data trainig data :', training_data_accuracy)

# accuracy score on the test data 
X_test_prediction = classifier.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction , Y_test)

print(' Accuracy score of the data :' , test_data_accuracy)

# Making a predictive system

input_data = (5,166,72,19,175,25.8,0.587,51)

# changing the input to numpy array
input_data_as_numpy_array = np.asarray(input_data)

# reshape the array as we are predicting for one instance 
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

# Standardize the input data
std_data = scaler.transform(input_data_reshaped)
print(std_data)

prediction = classifier.predict(std_data)
print(prediction)

if(prediction[0] == 0):
  print('the person is not diabetic')
else:
  print("the person is diabetic")

